"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
"""
import asyncio
import logging
import websockets
import json
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from dotenv import load_dotenv
import os
from blockchain_config import get_ws_url, get_subscription_method, DEFAULT_CONFIG
from config import Config
from services.trade_service import TradeService
from state import State

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher()
        self.state = State()
        self.trade_service = TradeService(state=self.state, error_callback=self._send_error_message)
        self.config = Config()
        self.websocket = None
        self.network = 'arbitrum'
        self.active_chat_id = None  # –•—Ä–∞–Ω–∏–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @self.dp.message(Command("start"))
        async def cmd_start(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
            self.active_chat_id = message.chat.id
            welcome_text = (
                "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KFC Limit Trade Bot!\n\n"
            )
            await message.answer(welcome_text, reply_markup=self._get_main_keyboard())
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ñ∂Ô∏è Start"
        @self.dp.message(lambda message: message.text == "‚ñ∂Ô∏è Start")
        async def start_monitoring(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫–æ–≤"""
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
            self.active_chat_id = message.chat.id
            
            if await self.state.get_block_monitoring_state():
                await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–∫–≤–∏–¥–Ω–∞—è –ø–∞—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            lp_state = await self.state.get_lp_state()
            if not lp_state['lp'] or not lp_state['target_price'] or not lp_state['chain_name']:
                await message.answer(
                    "‚ùå –õ–∏–∫–≤–∏–¥–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥ –ø–∞—Ä—É'.",
                    reply_markup=self._get_main_keyboard()
                )
                return
            
            await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            if self.trade_service:
                asyncio.create_task(self.trade_service._start_block_monitoring())
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏!")
            
            await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω! –ù–æ–≤—ã–µ –±–ª–æ–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚èπÔ∏è Stop"
        @self.dp.message(lambda message: message.text == "‚èπÔ∏è Stop")
        async def stop_monitoring(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫–æ–≤"""
            if await self.state.get_block_monitoring_state():
                await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
                return
            
            await message.answer("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.trade_service:
                await self.trade_service._stop_block_monitoring()
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏!")
            
            await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥ –ø–∞—Ä—É"
        @self.dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥ –ø–∞—Ä—É")
        async def add_liquidity_pair(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ–π –ø–∞—Ä—ã"""
            await message.answer(
                "üíß –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ª–∏–∫–≤–∏–¥–Ω–æ–π –ø–∞—Ä—ã –∏ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n"
                "–§–æ—Ä–º–∞—Ç: <–∞–¥—Ä–µ—Å_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞> <—Ü–µ–Ω–∞>\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ 0x1234...abcd 2500.50 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–¥—Ä–µ—Å)\n"
                "‚Ä¢ 0xaaa1...5e 2500.50 (Uniswap V4 –∏ –¥—Ä.)\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=self._get_cancel_keyboard()
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            self.state.waiting_for_lp_input = True

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞"
        @self.dp.message(lambda message: message.text == "–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞")
        async def show_current_pair(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã"""
            lp_state = await self.state.get_lp_state()
            if lp_state['lp'] and lp_state['target_price']:
                await message.answer(
                    f"üìä –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ª–∏–∫–≤–∏–¥–Ω–æ–π –ø–∞—Ä—ã: {lp_state['lp']}\n"
                    f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {lp_state['target_price']}\n"
                    f"–°–µ—Ç—å: {lp_state['chain_name']}",
                    reply_markup=self._get_main_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –õ–∏–∫–≤–∏–¥–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥ –ø–∞—Ä—É' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    reply_markup=self._get_main_keyboard()
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
        @self.dp.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
        async def cancel_input(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
            self.state.waiting_for_lp_input = False
            await message.answer(
                "‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=self._get_main_keyboard()
            )

        @self.dp.message(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö.")
        async def show_all_contracts(message: Message):
            self.state.waiting_for_lp_input = False
            contracts = await self.config.get_available_contracts()

            if not contracts:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ö–æ—Ç–∏–º) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                await message.answer(
                    "‚ÑπÔ∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=self._get_main_keyboard()
                )
                return

            lines = []
            for c in contracts:
                chain = c.get("chain_name", "<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å>")
                addr = c.get("address_contract", "<–Ω–µ—Ç –∞–¥—Ä–µ—Å–∞>")
                # –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ—á–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–æ—Å—å
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç (```) –∏–ª–∏ inline-–∫–æ–¥ (`) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                lines.append(f"**{chain.capitalize()}**: `{addr}`")

            message_text = "üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:\n\n" + "\n".join(lines)

            await message.answer(
                message_text,
                parse_mode='Markdown',
                reply_markup=self._get_main_keyboard()
            )

        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–∏–∫–≤–∏–¥–Ω–æ–π –ø–∞—Ä—ã –∏ —Ü–µ–Ω—ã
        @self.dp.message()
        async def handle_lp_input(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–∏–∫–≤–∏–¥–Ω–æ–π –ø–∞—Ä—ã –∏ —Ü–µ–Ω—ã"""
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –ª–∏–∫–≤–∏–¥–Ω–æ–π –ø–∞—Ä—ã
            if hasattr(self.state, 'waiting_for_lp_input') and self.state.waiting_for_lp_input:
                try:
                    # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    parts = message.text.strip().split()
                    if len(parts) != 2:
                        await message.answer(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∞–¥—Ä–µ—Å_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞> <—Ü–µ–Ω–∞>\n"
                            "–ü—Ä–∏–º–µ—Ä: 0x1234...abcd 2500.50",
                            reply_markup=self._get_cancel_keyboard()
                        )
                        return
                    
                    lp_address = parts[0]
                    target_price = float(parts[1])
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π –¥–ª–∏–Ω—ã)
                    if not lp_address.startswith('0x'):
                        await message.answer(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '0x'.\n"
                            "–ü—Ä–∏–º–µ—Ä: 0x1234567890abcdef1234567890abcdef12345678",
                            reply_markup=self._get_cancel_keyboard()
                        )
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ hex —Å–∏–º–≤–æ–ª—ã
                    hex_part = lp_address[2:]  # –£–±–∏—Ä–∞–µ–º '0x'
                    if not all(c in '0123456789abcdefABCDEF' for c in hex_part):
                        await message.answer(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ hex —Å–∏–º–≤–æ–ª—ã.\n"
                            "–ü—Ä–∏–º–µ—Ä: 0x1234567890abcdef1234567890abcdef12345678",
                            reply_markup=self._get_cancel_keyboard()
                        )
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É (–º–∏–Ω–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞)
                    if len(hex_part) < 40:
                        await message.answer(
                            "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 40 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ '0x'.\n"
                            "–ü—Ä–∏–º–µ—Ä: 0x1234567890abcdef1234567890abcdef12345678",
                            reply_markup=self._get_cancel_keyboard()
                        )
                        return
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π)
                    if target_price <= 0:
                        await message.answer(
                            "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!",
                            reply_markup=self._get_cancel_keyboard()
                        )
                        return
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    self.state.set_lp_state(lp_address, target_price)
                    self.state.waiting_for_lp_input = False
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    lp_state = await self.state.get_lp_state()
                    await message.answer(
                        f"‚úÖ –õ–∏–∫–≤–∏–¥–Ω–∞—è –ø–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                        f"üìä –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {lp_address}\n"
                        f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price}\n"
                        f"–°–µ—Ç—å: {lp_state['chain_name']}",
                        reply_markup=self._get_main_keyboard()
                    )
                    
                except ValueError:
                    await message.answer(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π.\n"
                        "–ü—Ä–∏–º–µ—Ä: 2500.50",
                        reply_markup=self._get_cancel_keyboard()
                    )
                except Exception as e:
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                        reply_markup=self._get_cancel_keyboard()
                    )
            else:
                return

    def _get_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö.")],
                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥ –ø–∞—Ä—É")],
                [KeyboardButton(text="–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞")],
                [KeyboardButton(text="‚ñ∂Ô∏è Start"), KeyboardButton(text="‚èπÔ∏è Stop")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        return keyboard
    
    def _get_cancel_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        return keyboard
    
    async def _send_error_message(self, error_message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if self.active_chat_id:
                await self.bot.send_message(chat_id=self.active_chat_id, text=error_message)
                logger.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç {self.active_chat_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ TradeService (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞): {error_message}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            await self.bot.delete_webhook(drop_pending_updates=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
            if await self.state.get_block_monitoring_state():
                await self._stop_block_monitoring()
            await self.bot.session.close()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if await self.state.get_block_monitoring_state():
            await self._stop_block_monitoring()
        await self.bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
