import asyncio
from decimal import Decimal
import logging
import aiohttp
from web3 import Web3, AsyncWeb3
import websockets
import json
import traceback

from blockchain_config import get_contract_address, get_rpc_urls, get_subscription_method, get_ws_url
from state import State

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TradeService:
    def __init__(self, state=None, error_callback=None):
        self._last_block_number = None
        self.state = state if state is not None else State()
        self.pair_abi = json.load(open('./abis/pair_abi.json'))
        self.kfc_swap_abi = json.load(open('./abis/kfc_swap_abi.json'))
        self.error_callback = error_callback  # Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    async def _stop_block_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫–æ–≤"""
        self.block_monitoring = False
        if self.websocket:
            await self.websocket.close()
            self.websocket = None
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _start_block_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ —á–µ—Ä–µ–∑ WebSocket"""
        try:
            await self.state.start_block_monitoring()
            lp_state = await self.state.get_lp_state()
            network = lp_state['chain_name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            if network is None:
                error_msg = "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –°–µ—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!\n\n" \
                          f"chain_name: {network}\n" \
                          f"target_price: {lp_state['target_price']}\n" \
                          f"lp_address: {lp_state['lp']}\n\n" \
                          f"–ß–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ –º–µ–Ω—é."
                
                logger.error(f"Network is None. chain_name:{network}, target_price:{lp_state['target_price']}, lp_address:{lp_state['lp']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if self.error_callback:
                    await self.error_callback(error_msg)
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                await self.state.stop_block_monitoring()
                return
            
            logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫–æ–≤ –¥–ª—è —Å–µ—Ç–∏: {network}")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –∏ –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
            ws_url = get_ws_url(network)
            if ws_url is None:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: WebSocket URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ—Ç–∏ '{network}'!\n\n" \
                          f"–ß–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏."
                
                logger.error(f"WebSocket URL not found for network: {network}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if self.error_callback:
                    await self.error_callback(error_msg)
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                await self.state.stop_block_monitoring()
                return
                
            subscription_method = get_subscription_method(network)
            
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {ws_url}")
            
            async with websockets.connect(ws_url) as websocket:
                self.websocket = websocket
                logger.info("WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏
                subscribe_message = {
                    "jsonrpc": "2.0",
                    "method": subscription_method["method"],
                    "params": subscription_method["params"],
                    "id": 1
                }
                
                await websocket.send(json.dumps(subscribe_message))
                logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                
                # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                async for message in websocket:
                    if not await self.state.get_block_monitoring_state():
                        break
                    
                    try:
                        data = json.loads(message)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ
                        if data.get("method") == "eth_subscription" and "params" in data:
                            block_data = data["params"]["result"]
                            
                            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å
                            block_number = int(block_data.get("number", "0x0"), 16)
                            timestamp = int(block_data.get("timestamp", "0x0"), 16)

                            pair_state = await self.state.get_lp_state()

                            if(pair_state['chain_name'] is not None and pair_state['target_price'] is not None and pair_state['lp'] is not None):
                                chain_name = pair_state["chain_name"]
                                target_price = pair_state['target_price']
                                lp_address = pair_state['lp']
                                await self.buy_token_v2(chain_name, target_price, lp_address)
                                
                                # print(f"\nüÜï –ù–û–í–´–ô –ë–õ–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!")
                                # print(f"üìä –ù–æ–º–µ—Ä –±–ª–æ–∫–∞: {block_number}")
                                # print(f"‚è∞ –í—Ä–µ–º—è: {timestamp}")
                                # print("-" * 50)
                            else:
                                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –õ–∏–∫–≤–∏–¥–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n\n" \
                                          f"chain_name: {pair_state['chain_name']}\n" \
                                          f"target_price: {pair_state['target_price']}\n" \
                                          f"lp_address: {pair_state['lp']}\n\n" \
                                          f"–ß–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ –º–µ–Ω—é."
                                
                                logger.error(f"pair state is none. chain_name:{pair_state['chain_name']}, target_price:{pair_state['target_price']}, lp_address:{pair_state['lp']}")
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                if self.error_callback:
                                    await self.error_callback(error_msg)
                                
                                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                                await self.state.stop_block_monitoring()
                                break
                            
                    except json.JSONDecodeError:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        
        except websockets.exceptions.ConnectionClosed:
            logger.warning("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"Traceback: {traceback.format_exc()}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –±–ª–æ–∫–æ–≤: {e}")
        finally:
            await self.state.stop_block_monitoring()
            self.websocket = None
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def buy_token_v2(self, chain_name, target_price, lp_address):
        try:
            rpc_urls= get_rpc_urls()
            w3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider(rpc_urls[chain_name]))
            pair_contarct = w3.eth.contract(address=w3.to_checksum_address(lp_address), abi=self.pair_abi)
            contarct_address = get_contract_address(chain_name)
            kfc_contarct = w3.eth.contract(address=w3.to_checksum_address(contarct_address),abi=self.kfc_swap_abi)
            
            token_0 = w3.to_checksum_address(await pair_contarct.functions.token0().call())
            token_1 = w3.to_checksum_address(await pair_contarct.functions.token1().call())
            target_price_usd = target_price

            path = [w3.to_checksum_address(token_0), w3.to_checksum_address(token_1)]
            pair_address = w3.to_checksum_address(contarct_address)
            eth_price_usd = await self.get_eth_price_usd_binance()
            target_price_eth = Decimal(target_price_usd) / eth_price_usd
            target_price_wei = int(target_price_eth * Decimal(1e18))
            print(pair_address, token_0, token_1, target_price)
            result = await kfc_contarct.functions.calculateEthToReachPrice(pair_address, token_0, token_1, target_price_wei).call()
            print(result)
        except Exception as error:
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise error


    async def get_eth_price_usd_binance(self):
        url = f"https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response.raise_for_status()
                data = await response.json()
                return Decimal(data['price'])
